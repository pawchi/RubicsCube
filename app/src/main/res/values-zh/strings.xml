<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">3D_cube</string>
    <string name="average_10_text">平均10：</string>
    <string name="average_20_text">平均20：</string>
    <string name="average_50_text">平均50：</string>
    <string name="average_5_text">平均5:</string>
    <string name="best_time_text">最佳得分：</string>
    <string name="button_2x2">如何解决3D\'S CUBE 2x2x2</string>
    <string name="button_3x3">如何解决3D\'S CUBE 3x3x3</string>
    <string name="button_general_info">一般信息和符号</string>
    <string name="button_timer">计时器</string>
    <string name="cancel">取消</string>
    <string name="case1_text">情况1</string>
    <string name="case2_text">情况2</string>
    <string name="case3_text">情况3</string>
    <string name="confirm_delete_score">您确定要删除所选结果吗？</string>
    <string name="dwa_step1_text2">如上图所示，求解2x2立方体首先要铺设一面具有相邻颜色的墙（例如绿色）。 这个阶段很简单，每个人都应该自己处理。 但是，在出现问题的情况下，以下算法将有所帮助，该算法将绿色块从底层移到顶层，而顶层的3个块保持不变。</string>
    <string name="dwa_step1_text3">您可以打3种情况之一，如下所示。</string>
    <string name="dwa_step2_text1">在此步骤中，首先将多维数据集旋转180度，以使第一步中完成的绿色墙位于多维数据集的底部。</string>
    <string name="dwa_step2_text2">现在，我们将所有蓝色块移动到顶层。 现在，我们不在乎侧壁是否匹配。 我们将在最后一步中处理它们。</string>
    <string name="dwa_step2_text3">在此步骤中，您将遇到7种情况之一。 下面显示了每个算法以及要使用的算法。 请记住正确设置多维数据集，否则算法将无法工作。 情况1的设置方法如下所示。对于所有其他情况，以相同的方式设置多维数据集。</string>
    <string name="dwa_step2_text5">案例2-7</string>
    <string name="dwa_step3_text1">这是最后一步，我们将完成整个多维数据集，如下图所示 ；）</string>
    <string name="dwa_step3_text2">这个阶段涉及交换角落。 我们只能在这里遇到2个案例。 对于每种情况，算法如下所示。 祝好运！！ 并且请不要忘记对应用程序进行评分。 谢谢！</string>
    <string name="exit_situation">初始情况</string>
    <string name="home">主页</string>
    <string name="introduction_main_page">在开始步骤1之前，请参阅3D的多维数据集表示法。 下面的图片应该使所有内容都清楚。 带有标记的规则是：如果从正面看立方体，则顺时针旋转90度，并用字母F(标记:front)。反向运动（逆时针）标记为F\'。 同样的规则也适用于所有其他墙（例如，上墙：U / U\'-up，下墙：D / D\'-down）。</string>
    <string name="language_title">选择语言：</string>
    <string name="not">不是</string>
    <string name="settings_change_language">选择语言</string>
    <string name="settings_rate_us">评价申请。</string>
    <string name="settings_title">设置：</string>
    <string name="step1">步骤1</string>
    <string name="step2">步骤2</string>
    <string name="step3">步骤3</string>
    <string name="step4">步骤4</string>
    <string name="step5">步骤5</string>
    <string name="step6">步骤6</string>
    <string name="step7">步骤7</string>
    <string name="step1_effect">步骤1的效果</string>
    <string name="step2_effect">步骤2的效果</string>
    <string name="step3_effect">步骤3的效果</string>
    <string name="step4_effect">步骤4的效果</string>
    <string name="step5_effect">步骤5的效果</string>
    <string name="step6_effect">步骤6的效果</string>
    <string name="step7_effect">步骤7的效果</string>
    <string name="step1_text1">如果您尚不知道用于排列多维数据集的表示法，请返回到起始页并转到“标记和表示法”选项卡。 我们通过将十字架放在顶墙上开始安排立方体。 对我们来说，这将是一个蓝色的十字架。 我们对其进行排列，以使交叉块与侧块的颜色匹配，如下图所示。</string>
    <string name="step1_text2">此步骤非常简单直观。 下图中显示了可能出现的唯一问题以及解决方案。</string>
    <string name="step2_text1">在这一步中，我们将布置顶壁的角，如下图所示。</string>
    <string name="step2_text2">根据下角的排列，您可能会遇到3种情况：</string>
    <string name="step3_text1">当您准备好上一个阶段时，请扭曲中间层，以使侧壁的中心块位于边框下方，并以适当的颜色形成字母T-如下图所示。</string>
    <string name="step3_text2">在这一步中，我们使用下面显示的算法完成第二次振铃。 在图片示例中，您将一块红白色的石头放在正确的位置（当然，您可以从每块石头开始，它不一定是红白色的）。 要找到正确的宝石，请转动带有D / D\'运动的下环。 如果没有正确位置的石头要插入（并且第二层未完成），则表示石头位于第二个环中的某个位置，但位置错误。 在这种情况下，请使用相同的算法将此错误的石头从第二个环扔到下一个环。 然后将石头放在正确的位置以再次执行算法。 重复此过程，直到完成第二个振铃。 然后，您可以继续下一步。</string>
    <string name="step3_text3">上面的算法在右边插入了石头，因此足以完成此步骤。 但是，如果您知道将块向另一个方向（向左）移动的算法，则可能会更加轻松快捷，如下图所示。</string>
    <string name="step4_text1">在这一步中，我们将在顶面上放置一个十字。 首先转动立方体，使不完整的（底部）面在顶部-如上图所示。 初始情况显示了十字架的任何元素都没有完成的情况。 在这种情况下，我们将执行以下算法一次或两次。</string>
    <string name="step4_text2">结果，您将获得L字母，其外观如下图所示。 然后，您再次执行该算法以完成交叉。</string>
    <string name="step4_text3">如果不清楚，请看下面的图片，以查看在多维数据集上每次执行该算法后会发生什么（如果必须执行该算法三次才能获得最终效果，则表明情况最糟）。 如上图所示，如果已经有了字母L，请记住要相应地调整立方体！</string>
    <string name="step5_text1">在顶部交叉后，您需要在此步骤中将边缘块放置在其最终位置，以匹配侧面中心块的颜色。</string>
    <string name="step5_text2">以下算法可以在相邻墙中交换两块。 根据多维数据集的情况，您可能需要多次运行此算法。 因此，您应该获得带有匹配侧壁的整个十字架。</string>
    <string name="step5_text3">如果不清楚，请看下面的图片。 当必须将算法执行3次以将所有交叉元素放置在正确的位置时，它显示了最坏的情况。 执行算法时，请不要忘记将立方体保持在正确的位置（如左图所示）。</string>
    <string name="step6_text1">恭喜你！ 来到这里意味着，您非常接近完成整个立方体。 下面的算法将顶级角放置在正确的位置。 目前，角落不必匹配侧壁上的相应颜色。 重要的是它们只能位于正确的位置（例如，墙的交点处的基石：红-黄-蓝应由颜色组成：红-黄-蓝等）。</string>
    <string name="step6_text2">如果没有正确的角件，请运行以下算法。 因此，至少一个角板应处于正确的位置。</string>
    <string name="step6_text3">现在，找出哪个角块处于正确的位置，并以如下方式放置立方体：从正面看时，已设置的角块在立方体的左上角（如下图所示）。 然后，根据其他角，再次执行该算法一次或两次，直到所有角都位于正确的位置。</string>
    <string name="step6_text4">如果不清楚，请看下面的图片，其中显示了每次执行算法后多维数据集上发生的事情（示例显示了必须两次执行算法才能获得此步骤的最终效果的情况）。 请记住，始终将立方体设置为不要移动的角块位于立方体的左上角！</string>
    <string name="step6_text5">如果某些方法不起作用，请不要放弃，然后重试。 此步骤是设置多维数据集的最难的部分。 但是最后，第七种算法非常简单！</string>
    <string name="step7_text1">在最后一步中，您将最终确定角件的方向（也就是说，旋转角件以匹配墙的颜色-参见下图）。</string>
    <string name="step7_text2">现在，请从下面的图片中进行2到4次简单的算法-直到正确地变换了变换后的角点。</string>
    <string name="step7_text3">现在，沿U\'方向旋转上环，直到下一个错误定向的角块定位到位，以再次执行算法2或4次。</string>
    <string name="step7_text4">对不正确定向的角块重复此过程，直到完成立方体！</string>
    <string name="step7_text5">注意！！！</string>
    <string name="step7_text6">在这些步骤中，多维数据集看起来像是混合在一起了。 不用担心-应该是这样！ 一切都回到它的位置 :)</string>
    <string name="step7_text7">但是，如果这对于您来说还不是很清楚，请看下面的图片，该图显示了一个示例，其中所有四个角都必须旋转。 应用该算法后，OK标记已布置的角。 请注意，与此同时，多维数据集实际上看起来很混乱……但是最终，所有内容都恢复了原来的位置！</string>
    <string name="timer_show_scores_table">计分板</string>
    <string name="title">如何解决鲁比克的魔方</string>
    <string name="worst_time_text">最差分数：</string>
    <string name="yes">是</string>
    <string name="delete_scores">删除分数</string>
    <string name="list_sort_cubes">魔方</string>
    <string name="list_sort_dates">日期</string>
    <string name="list_sort_scores">得分</string>
    <string name="dwa_step1_text1">如果您不知道用于3D多维数据集的符号，则在开始步骤1之前，请确保查看“标记和符号”选项卡。</string>
    <string name="skocz_text_1">Google Play中的新逻辑游戏。</string>
    <string name="skocz_text_2">填补空缺，并在您所在的城市，国家或世界范围内排名第一。</string>
</resources>