<?xml version="1.0" encoding="utf-8"?>
<resources>
    <string name="app_name">3D_cube</string>
    <string name="average_10_text">10の平均：</string>
    <string name="average_20_text">20の平均：</string>
    <string name="average_50_text">50の平均：</string>
    <string name="average_5_text">5の平均：</string>
    <string name="best_time_text">ベスト：</string>
    <string name="button_2x2">3Dのキューブ2x2x2を解決する方法</string>
    <string name="button_3x3">3Dのキューブ3x3x3を解決する方法</string>
    <string name="button_general_info">一般情報と表記</string>
    <string name="button_timer">タイマー</string>
    <string name="cancel">キャンセル</string>
    <string name="case1_text">事例1</string>
    <string name="case2_text">事例2</string>
    <string name="case3_text">事例3</string>
    <string name="confirm_delete_score">選択した結果を削除してもよろしいですか？</string>
    <string name="delete_scores">スコアの削除</string>
    <string name="dwa_step1_text1">ルービックキューブに使用される表記法がわからない場合は、手順1を開始する前に、[マークと表記法]タブを確認してください。</string>
    <string name="dwa_step1_text2">2x2キューブを解くには、上の図のように、隣接する色で1つの壁（緑など）を配置することから始めます。 この段階は単純であり、誰もが自分で対処する必要があります。 ただし、問題が発生した場合は、次のアルゴリズムが役立ちます。これにより、緑色のブロックが下から上に移動し、上層の3つのブロックは変更されません。</string>
    <string name="dwa_step1_text3">以下に示すように、3つのケースのいずれかをヒットできます。</string>
    <string name="dwa_step2_text1">このステップでは、最初に立方体を180度回転させて、最初のステップで完成した緑の壁が立方体の底にくるようにします。</string>
    <string name="dwa_step2_text2">次に、すべての青いブロックを最上層に移動します。 今のところ、側壁が一致するかどうかは気にしません。 最後のステップでそれらを処理します。</string>
    <string name="dwa_step2_text3">このステップでは、7つのケースの1つに会います。 それぞれを、使用するアルゴリズムとともに以下に示します。 キューブを正しく設定してください。正しく設定しないと、アルゴリズムが機能しません。 ケース1の設定方法を以下に示します。他のすべてのケースについても同じ方法でキューブを設定します。</string>
    <string name="dwa_step2_text5">ケース2-7</string>
    <string name="dwa_step3_text1">これは、下の図に示すようにキューブ全体を完成させる最後のステップです;））</string>
    <string name="dwa_step3_text2">この段階では、コーナーを交換します。 ここで会うことができるのは2件だけです。 それぞれの場合について、アルゴリズムを以下に示します。 幸運を！！ そして、アプリケーションを評価することを忘れないでください。 ありがとう！</string>
    <string name="exit_situation">初期状況</string>
    <string name="home">ホームページ</string>
    <string name="introduction_main_page">ステップ1を開始する前に、ルービックキューブ表記を参照してください。 以下の写真ですべてが明確になります。 マーキングのルールは次のとおりです。正面から立方体を見ると、時計回りに90度ずつ1回回転し、文字Fでマークされます。 また、他のすべての壁にも同じルールが適用されます（上壁：U / U \'-上、下壁：D / D\'-下など）。</string>
    <string name="language_title">言語を選択する：</string>
    <string name="list_sort_cubes">キューブ</string>
    <string name="list_sort_dates">日付</string>
    <string name="list_sort_scores">スコア</string>
    <string name="not">番号</string>
    <string name="settings_change_language">言語を選択する。</string>
    <string name="settings_rate_us">アプリケーションを評価します。</string>
    <string name="settings_title">設定：</string>
    <string name="step1">ステップ1</string>
    <string name="step2">ステップ2</string>
    <string name="step3">ステップ3</string>
    <string name="step4">ステップ4</string>
    <string name="step5">ステップ5</string>
    <string name="step6">ステップ6</string>
    <string name="step7">ステップ7</string>
    <string name="step1_effect">ステップ1の効果</string>
    <string name="step2_effect">ステップ2の効果</string>
    <string name="step3_effect">ステップ3の効果</string>
    <string name="step4_effect">ステップ4の効果</string>
    <string name="step5_effect">ステップ5の効果</string>
    <string name="step6_effect">ステップ6の効果</string>
    <string name="step7_effect">ステップ7の効果</string>
    <string name="step1_text1">キューブの配置に使用される表記法がまだわからない場合は、開始ページに戻り、[マークと表記法]タブに移動します。 上の壁に十字架を配置して、キューブの配置を開始します。 私たちにとって、それは青い十字になります。 次の図に示すように、クロスブロックがサイドブロックの色と一致するように配置します。</string>
    <string name="step1_text2">この手順は非常にシンプルで直感的です。 発生する可能性のある唯一の問題は、下の図に解決策とともに示されています。</string>
    <string name="step2_text1">このステップでは、下の図に示すように、上壁の角を配置します。</string>
    <string name="step2_text2">下隅の配置に応じて、3つのケースに遭遇する可能性があります。</string>
    <string name="step3_text1">前のステージの準備ができたら、下の図に示すように、側壁の中央ブロックが適切な色の境界の下にあるように中間層をひねり、文字Tを形成します。</string>
    <string name="step3_text2">このステップでは、以下に示すアルゴリズムを使用して2番目のリングを完成させます。 写真の例では、適切な場所に赤白の石を置きます（もちろん、すべての石から始めることができますが、赤白である必要はありません）。 正しい石を見つけるには、D / D \'の動きで下のリングを回してください。 挿入する正しい位置に石がない場合（および2番目のレベルが完了していない場合）、それは石が2番目のリングのどこかに間違った位置にあることを意味します。 この場合、同じアルゴリズムを使用して、この間違った石を2番目のリングから下のリングに投げ出します。 次に、石を正しい位置に配置して、アルゴリズムを再度実行します。 2番目のリング全体が完了するまで、このプロセスを繰り返します。 その後、次の手順に進むことができます。</string>
    <string name="step3_text3">上記のアルゴリズムは右に石を挿入するため、このステップを完了するのに十分です。 ただし、下の図に示すように、ブロックを他の方向（左）に移動するアルゴリズムを知っていると、より簡単かつ迅速になります。</string>
    <string name="step4_text1">このステップでは、上面に十字を付けます。 最初の状況で上の写真のように、最初に立方体を回転させて、不完全な（底面）面が上になるようにします。 最初の状況は、十字の要素が完成していない場合を示しています。 この場合、次のアルゴリズムを1回または2回実行します。</string>
    <string name="step4_text2">その結果、下の図のように見えるはずのLの文字が表示されます。 その後、アルゴリズムを再度実行して、完成したクロスを取得します。</string>
    <string name="step4_text3">不明な点がある場合は、以下の図を参照して、キューブでアルゴリズムを実行するたびに何が起こるかを確認してください（最終的な効果を得るためにアルゴリズムを3回実行する必要がある場合、最悪の状況が示されます）。 上の写真のように、すでに文字Lを持っている場合は、それに応じてキューブを調整することを忘れないでください！</string>
    <string name="step5_text1">上部でクロスを作成した後、サイドの中央ピースの色と一致するように、最終ステップでこのステップエッジピースを配置する必要があります。</string>
    <string name="step5_text2">次のアルゴリズムは、隣接する壁の2つのピースを交換できます。 キューブ内の状況によっては、このアルゴリズムを複数回実行する必要がある場合があります。 その結果、一致する側壁を持つクロス全体を取得する必要があります。</string>
    <string name="step5_text3">不明な点がある場合は、下の写真をご覧ください。 すべての交差要素を適切な場所に配置するために、アルゴリズムを3回実行する必要がある場合の最悪の状況を示しています。 アルゴリズムを実行するときは、キューブを正しい位置に保つことを忘れないでください（上の写真のように）。</string>
    <string name="step6_text1">おめでとう ！ ここに来るということは、キューブ全体を完成させるのに非常に近いということです。 以下のアルゴリズムは、最上位のコーナーを正しい位置に配置します。 今のところ、角は側壁の対応する色と一致する必要はありません。 それらが正しい位置にあることだけが重要です（例えば、壁の交点のコーナーストーン：赤黄青は、赤黄青などの色で構成する必要があります）。</string>
    <string name="step6_text2">コーナーピースが適切な場所にない場合は、次のアルゴリズムを実行します。 その結果、少なくとも1つのコーナーピースが正しい位置に来るはずです。</string>
    <string name="step6_text3">次に、どのコーナーピースが正しい位置にあるかを確認し、正面から見たときに既に設定されているコーナーピースがキューブの左上隅になるようにキューブを配置します（下の図を参照）。 次に、他のコーナーに応じて、すべてのコーナーが適切な位置になるまでアルゴリズムを1回または2回実行します。</string>
    <string name="step6_text4">不明な点がある場合は、次の図をご覧ください。アルゴリズムの各実行後にキューブで何が起こったのかが示されています（このステップの最終的な効果を得るためにアルゴリズムを2回実行する必要がある場合を示しています）。 移動したくないコーナーピースがキューブの左上隅になるように、常にキューブを設定してください!!</string>
    <string name="step6_text5">何かがうまくいかない場合は、あきらめずに再試行してください。 このステップは、キューブを設定する上で最も難しい部分です。 しかし、最後の7番目のアルゴリズムは非常に簡単です！</string>
    <string name="step7_text1">最後のステップでは、最後にコーナーピースの方向を決めます（つまり、コーナーピースを壁の色に合わせて回転させます-下の図を参照）。</string>
    <string name="step7_text2">次に、変換されたコーナーピースが正しい方向になるまで、下の図から簡単なアルゴリズムを2〜4回実行してください。</string>
    <string name="step7_text3">次に、次の誤った向きのコーナーピースがアルゴリズムを2〜4回実行する位置にくるまで、上部リングをU \'方向に回転させます。</string>
    <string name="step7_text4">キューブが完成するまで、不適切な向きのコーナーピースに対してこのプロセスを繰り返します！</string>
    <string name="step7_text5">注意！！！</string>
    <string name="step7_text6">これらの手順の間、キューブはすべて混同されているように見えます。 心配しないでください-これは次のようになります！ すべてが元の位置に戻ります:)））</string>
    <string name="step7_text7">しかし、これが完全に明確でない場合は、4つのコーナーすべてを回転させる必要がある例を示す以下の図を見てください。 [OK]は、アルゴリズムの適用後に既に配置されているコーナーをマークします。 その間、キューブは実際には混乱して見えることに注意してください...しかし、最終的にはすべてがその場所に戻ります！</string>
    <string name="timer_show_scores_table">スコアボード</string>
    <string name="title">3Dのキューブを解決する方法</string>
    <string name="worst_time_text">最悪の結果：</string>
    <string name="yes">はい</string>
    <string name="skocz_text_2">ボードに記入して、あなたの街、国、または世界で最初になりましょう。</string>
    <string name="skocz_text_1">グーグルプレイの新しいロジックゲーム。</string>
</resources>